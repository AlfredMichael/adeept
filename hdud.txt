import cv2
import threading
from picamera2 import Picamera2
from ultralytics import YOLO
import torch
import os

# Load YOLO model
model = YOLO("yolov8n.pt")

# Dynamically optimize PyTorch to use all CPU cores
torch.set_num_threads(os.cpu_count())  # Uses all available cores

# Initialize camera
picam2 = Picamera2()
picam2.start()

# Function to run inference asynchronously
def run_inference(frame):
    results = model(frame)
    return results[0].plot()

while True:
    frame = picam2.capture_array()  # Capture frame

    # Run YOLOv8 inference asynchronously in a thread
    thread = threading.Thread(target=run_inference, args=(frame,))
    thread.start()

    # Show the frame while inference is running (avoids blocking)
    cv2.imshow("Camera Preview", frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cv2.destroyAllWindows()
picam2.stop()


source) if is_cli else self.predictor(source=source, stream=stream) ^^  ^^^^^^^^^^^^^^^^ ^ ^ Thread-36 (run_inference)^^
^^
^^^  ^^^^^^^^^^^^^^^^   ^ ^:
  File "/home/fredthedev/ATREUS/atreus_venv/lib/python3.11/site-packages/ultralytics/engine/model.py", line 550, in predict
^^^ ^^^^ ^^^^
^^^^^^^^^^^  ^ ^Traceback (most recent call last):
^  File "/usr/lib/python3.11/threading.py", line 1038, in _bootstrap_inner
^^     ^^^^ ^^^^  File "/home/fredthedev/ATREUS/atreus_venv/lib/python3.11/site-packages/ultralytics/engine/model.py", line 550, in predict
^^^^^^^^^^^  ^ ^^^^ ^return self.predictor.predict_cli(source=source) if is_cli else self.predictor(source=source, stream=stream)
^^     ^^^^^^^^^^^    ^^^^^  ^^^^^ ^^ ^^^ ^self.run()^^^^^^^^^return self.predictor.predict_cli(source=source) if is_cli else self.predictor(source=source, stream=stream)^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/fredthedev/ATREUS/atreus_venv/lib/python3.11/site-packages/ultralytics/engine/model.py", line 550, in predict
    return self.predictor.predict_cli(source=source) if is_cli else self.predictor(source=source, stream=stream)
                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/fredthedev/ATREUS/atreus_venv/lib/python3.11/site-packages/ultralytics/engine/predictor.py", line 216, in __call__
    return list(self.stream_inference(source, model, *args, **kwargs))  # merge list of Result into one
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/fredthedev/ATREUS/atreus_venv/lib/python3.11/site-packages/ultralytics/engine/model.py", line 550, in predict
    return self.predictor.predict_cli(source=source) if is_cli else self.predictor(source=source, stream=stream)
                                                                    ^^^^^^^^^^^^^^^^^


-----------------




from picamera2 import Picamera2
import cv2
from ultralytics import YOLO

picam2 = Picamera2()
picam2.start()

model = YOLO("yolov8n.pt")

while True:
    frame = picam2.capture_array()  # Get the live camera frame

    results = model.predict(frame)  # Run YOLO detection

    cv2.imshow("YOLOv8 Live Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cv2.destroyAllWindows()
picam2.close()





import cv2
from ultralytics import YOLO

model = YOLO("yolov8n.pt")

cap = cv2.VideoCapture(0)  # Open the default camera

while True:
    ret, frame = cap.read()
    if not ret:
        break

    results = model.predict(frame)  # Run YOLO detection
    cv2.imshow("YOLOv8 Live Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()





from picamera2 import Picamera2
import cv2

picam2 = Picamera2()
picam2.start()
frame = picam2.capture_array()

cv2.imshow("Picamera2 Test", frame)
cv2.waitKey(0)
cv2.destroyAllWindows()
picam2.close()








--------------------------------------------------------------------------------------
import cv2
from picamera2 import Picamera2
from ultralytics import YOLO

# Initialize the camera
picam2 = Picamera2()
picam2.preview_configuration.main.size = (640, 480)  # Set resolution
picam2.preview_configuration.main.format = "RGB888"  # Set color format
picam2.configure("preview")
picam2.start()

# Load YOLOv8 model
model = YOLO("yolov8n.pt")  # You can use "yolov8s.pt" for a stronger model

while True:
    # Capture frame from camera
    frame = picam2.capture_array()

    # Perform YOLOv8 object detection
    results = model.predict(frame)

    # Draw bounding boxes on detected objects
    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = box.xyxy[0].tolist()
            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)

    # Display the frame with detections
    cv2.imshow("YOLOv8 Live Detection", frame)

    # Exit if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# Cleanup
cv2.destroyAllWindows()
picam2.close()
