(atreus_venv) fredthedev@raspberrypi:~/ATREUS $ python TestModelInference.py
Traceback (most recent call last):
  File "/home/fredthedev/ATREUS/TestModelInference.py", line 1, in <module>
    from picamera2 import Picamera2
  File "/home/fredthedev/ATREUS/atreus_venv/lib/python3.11/site-packages/picamera2/__init__.py", line 4, in <module>
    import libcamera
ModuleNotFoundError: No module named 'libcamera'
(atreus_venv) fredthedev@raspberrypi:~/ATREUS $ libcamera-hello -t 0
[2:32:12.556253381] [4326]  INFO Camera camera_manager.cpp:327 libcamera v0.4.0+53-29156679
[2:32:12.563374306] [4329]  INFO RPI pisp.cpp:720 libpisp ve

-----------------




from picamera2 import Picamera2
import cv2
from ultralytics import YOLO

picam2 = Picamera2()
picam2.start()

model = YOLO("yolov8n.pt")

while True:
    frame = picam2.capture_array()  # Get the live camera frame

    results = model.predict(frame)  # Run YOLO detection

    cv2.imshow("YOLOv8 Live Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cv2.destroyAllWindows()
picam2.close()





import cv2
from ultralytics import YOLO

model = YOLO("yolov8n.pt")

cap = cv2.VideoCapture(0)  # Open the default camera

while True:
    ret, frame = cap.read()
    if not ret:
        break

    results = model.predict(frame)  # Run YOLO detection
    cv2.imshow("YOLOv8 Live Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()





from picamera2 import Picamera2
import cv2

picam2 = Picamera2()
picam2.start()
frame = picam2.capture_array()

cv2.imshow("Picamera2 Test", frame)
cv2.waitKey(0)
cv2.destroyAllWindows()
picam2.close()








--------------------------------------------------------------------------------------
import cv2
from picamera2 import Picamera2
from ultralytics import YOLO

# Initialize the camera
picam2 = Picamera2()
picam2.preview_configuration.main.size = (640, 480)  # Set resolution
picam2.preview_configuration.main.format = "RGB888"  # Set color format
picam2.configure("preview")
picam2.start()

# Load YOLOv8 model
model = YOLO("yolov8n.pt")  # You can use "yolov8s.pt" for a stronger model

while True:
    # Capture frame from camera
    frame = picam2.capture_array()

    # Perform YOLOv8 object detection
    results = model.predict(frame)

    # Draw bounding boxes on detected objects
    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = box.xyxy[0].tolist()
            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)

    # Display the frame with detections
    cv2.imshow("YOLOv8 Live Detection", frame)

    # Exit if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# Cleanup
cv2.destroyAllWindows()
picam2.close()
