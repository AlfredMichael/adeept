import cv2
import torch
import os
from picamera2 import Picamera2
from ultralytics import YOLO

# Load YOLO model
model = YOLO("yolov8n.pt")

# Optimize PyTorch to use all CPU cores
torch.set_num_threads(os.cpu_count())

# Initialize the camera
picam2 = Picamera2()
picam2.start()

while True:
    frame = picam2.capture_array()  # Capture frame

    # Convert frame to RGB format (fixes channel issues)
    frame = cv2.cvtColor(frame, cv2.COLOR_BGRA2BGR)

    # Run YOLOv8 inference synchronously
    results = model(frame)

    # Plot detections on the frame
    annotated_frame = results[0].plot()

    # Display the annotated frame
    cv2.imshow("YOLOv8 Real-Time Inference", annotated_frame)

    # Exit on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cv2.destroyAllWindows()
picam2.stop()



import cv2
import threading
from queue import Queue
from picamera2 import Picamera2
from ultralytics import YOLO

# Load YOLO model
model = YOLO("yolov8n.pt")

# Initialize camera
picam2 = Picamera2()
picam2.start()

# Create a queue for frames
frame_queue = Queue()

def run_inference():
    while True:
        if not frame_queue.empty():
            frame = frame_queue.get()
            results = model(frame)
            annotated_frame = results[0].plot()
            cv2.imshow("YOLOv8 Real-Time Inference", annotated_frame)
        
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

# Start the inference thread
thread = threading.Thread(target=run_inference)
thread.start()

while True:
    frame = picam2.capture_array()
    frame_queue.put(frame)  # Add frame to queue

cv2.destroyAllWindows()
picam2.stop()
thread.join()



-----------------




from picamera2 import Picamera2
import cv2
from ultralytics import YOLO

picam2 = Picamera2()
picam2.start()

model = YOLO("yolov8n.pt")

while True:
    frame = picam2.capture_array()  # Get the live camera frame

    results = model.predict(frame)  # Run YOLO detection

    cv2.imshow("YOLOv8 Live Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cv2.destroyAllWindows()
picam2.close()





import cv2
from ultralytics import YOLO

model = YOLO("yolov8n.pt")

cap = cv2.VideoCapture(0)  # Open the default camera

while True:
    ret, frame = cap.read()
    if not ret:
        break

    results = model.predict(frame)  # Run YOLO detection
    cv2.imshow("YOLOv8 Live Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()





from picamera2 import Picamera2
import cv2

picam2 = Picamera2()
picam2.start()
frame = picam2.capture_array()

cv2.imshow("Picamera2 Test", frame)
cv2.waitKey(0)
cv2.destroyAllWindows()
picam2.close()








--------------------------------------------------------------------------------------
import cv2
from picamera2 import Picamera2
from ultralytics import YOLO

# Initialize the camera
picam2 = Picamera2()
picam2.preview_configuration.main.size = (640, 480)  # Set resolution
picam2.preview_configuration.main.format = "RGB888"  # Set color format
picam2.configure("preview")
picam2.start()

# Load YOLOv8 model
model = YOLO("yolov8n.pt")  # You can use "yolov8s.pt" for a stronger model

while True:
    # Capture frame from camera
    frame = picam2.capture_array()

    # Perform YOLOv8 object detection
    results = model.predict(frame)

    # Draw bounding boxes on detected objects
    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = box.xyxy[0].tolist()
            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)

    # Display the frame with detections
    cv2.imshow("YOLOv8 Live Detection", frame)

    # Exit if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# Cleanup
cv2.destroyAllWindows()
picam2.close()
